(function(t,e){typeof exports=="object"&&typeof module<"u"?e(exports):typeof define=="function"&&define.amd?define(["exports"],e):(t=typeof globalThis<"u"?globalThis:t||self,e(t.WebDualShock={}))})(this,function(t){"use strict";var m=Object.defineProperty;var p=(t,e,s)=>e in t?m(t,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[e]=s;var o=(t,e,s)=>p(t,typeof e!="symbol"?e+"":e,s);class e{constructor(){o(this,"state",{buttons:{},axes:{},timestamp:0});o(this,"_hidDevice",null);o(this,"_gamepadIndex",null)}async init(){"hid"in navigator?await this._initWebHID():this._initGamepadAPI()}async _initWebHID(){const n=[{vendorId:1356}],[i]=await navigator.hid.requestDevice({filters:n});if(!i)throw new Error("No device selected");this._hidDevice=i,await i.open(),i.addEventListener("inputreport",c=>{this.state={...this.state,buttons:{...this.state.buttons,raw:!0},axes:{...this.state.axes,raw:0},timestamp:Date.now()}})}_initGamepadAPI(){const n=()=>{const i=navigator.getGamepads();for(const[c,a]of Array.from(i).entries())a&&a.id.match(/(Wireless Controller|DualSense|DualShock)/i)&&(this._gamepadIndex=c,this.state={buttons:Object.fromEntries(a.buttons.map((r,d)=>[d,r.pressed])),axes:Object.fromEntries(a.axes.map((r,d)=>[d,r])),timestamp:a.timestamp});requestAnimationFrame(n)};n()}}t.DualShock=e,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});
